/* The following program calculates number of prime numbers preceeding first N natural numbers.It demonstrates language features such as:- Variables: booleans and integers, assigmens and reassigments- Flow control: if and while- Functions: arguments, returning, declarations and calls- Overloading- Comments /* inculding nested comments */*//* Language limitation: All function arguments and return values must be variables not expressions! */let t = true;let f = false;func isPrime(n) {	if n <= 1 { return f; };			/* If n is smaller or equal to one, it is not a prime. */	if n == 2 { return t; };			/* If n is equal to two, it is a prime. */	if (n % 2) == 0 { return f; };		/* If n mod 2 is zero, it is not a prime. */	let d = 3;							/* Declare the divisor. */	while (d * d) <= n {				/* Iterate only for square roots. */		if (n % d) == 0 { return f; };	/* If modulo is 0, it's not a prime. */		d = d + 2;						/* Keep checking... */	};	return t;							/* Apparently, it is a prime! */};func primeCount(max) {	print max;	let out = 0;						/* Skip 0, 1, 2. */	let num = 2;	while num < max {					/* Iterate over the range. */		let prime = isPrime(num);		if prime {			out = out + 1;				/* Count the prime. */		};		print num;						/* Print current results. */		print out;		num = num + 1;					/* Keep going... */	};	return out;};let limit = 50;let programOut = primeCount(limit);return programOut;